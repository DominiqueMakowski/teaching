---
title: "Bayesian Statistics"
subtitle: "**0. RefreshR**"
author: "<sub>Dominique Makowski</sub><br><sub><sup>*D.Makowski@sussex.ac.uk*</sup></sub>"
# institute: "University of Sussex"
title-slide-attributes:
  data-background-image: "https://github.com/RealityBending/RealityBending.github.io/blob/main/assets/media/sussex.png?raw=true"
  data-background-opacity: "0.2"
  data-background-color: "black"
  # data-background-size: contain
format:
  revealjs:
    logo: "https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/University_of_Sussex_Logo.svg/480px-University_of_Sussex_Logo.svg.png"
    incremental: true
    chalkboard: true
    scrollable: true
    code-line-numbers: false
    slide-number: "c/t"
    highlight-style: "github-dark"
    fontsize: "170%"
editor_options:
  chunk_output_type: console
execute:
  cache: false
fig-dpi: 300
---

## Follow the slides

- https://github.com/DominiqueMakowski/teaching
  - ðŸ‘‰ *Lecture 0*

## The Environment {.center background-color="#003B49"}

## Setup

- Make sure you have **R** and **RStudio** on your computer
  - Why local installation? *Independence, flexibility, and power*
- Follow the instruction on Canvas (in **/Module Information**)
- If you have any problem, let me know

![](img/prerequisites.png){.r-stretch}


<!-- ## Why R? -->

<!-- - Why not SPSS? Matlab? Python? -->

<!--   - The best for **statistics** (by far) -->
<!--   - The best for **visualization** -->
<!--   - **Free** (independence) -->
<!--   - **Flexible** (packages) -->
<!--   - **Powerful** (create websites, presentations, ...) -->
<!--   - **Demanded** (ðŸ’°) -->
<!--   - Gold standard across science -->
<!--   - Cutting-edge statistics and methods (e.g., Bayesian statistics) -->
  
## Vocabulary

- **R** = programming language
- **RStudio** = the "editor" that we use to work with R
- **Posit** = The company that created R Studio and that provides cloud services (used to be called *RStudio*)
- **Posit cloud** = The online version of RStudio
- **Quarto** = Used to be called R Markdown. A system to combine code, text, and code output into nice documents (similar to *Jupyter*)
- **Markdown** = A simple syntax to \**format*\* text used on \*\***internet**\*\*

## Panels

![](img/rstudio_panels.png){.r-stretch}

1. Source (text editor)
2. Console (interactive)
3. Environment (objects)
4. Files (navigate)

## Creating New Document

![](img/newdoc.png){.r-stretch}

- You can interact with code inside code chunks

## Options

![](img/options.png){.r-stretch}

- Remove "editor" (or replace `visual` with `source`)
  - `editor: source`
- Select **"Chunk Output in Console"**


## Interacting

::::: {.columns}
:::: {.column width="50%"}

1. Create a new document (file)
    - `.R` (R script) or `.qmd` (quarto document)
2. Write some code in the script
3. Run the code
    - Click somewhere on the same line that you want to execute
    - Or select the code that you want to execute
    - Hit `Ctrl+Enter`

::::
:::: {.column}

::: {.fragment}

```{r}
#| echo: true
2 + 2
```

:::

::::
:::::

## Programming Concepts {.center background-color="#003B49"}


## Classes

::::: {.columns}
:::: {.column width="75%"}

- In R, each thing has a **class** (type)
  - **Numeric** (aka *integers* and *floats*; numbers)
  - **Character** (aka *string*; text)
  - **Logical** (aka *booleans*; `TRUE`/`FALSE`)
    - *Note:* TRUE and FALSE are equivalent to 1 and 0
    - Try: `TRUE + TRUE`
  - **Factors** (aka *categorical*; e.g. experimental conditions)
  - **Comments** (with *hash* #, `CTRL + SHIFT + C`)
  - **"Functions"** (ends with `()`; e.g. `mean()`)
  - Many more...

- You can check the class of an object with `class()`
- You can access a function's documentation with `?mean` or clicking on the function and pressing `F1`

::::
:::: {.column width="25%"}

Types
```{r}
#| eval: false
#| echo: true
# Number
3
# Character "quotations"
"text"
# Logical
TRUE
```

::: {.fragment}

Check class
```{r}
#| echo: true

x <- 3
class(x)
```

:::

::::
:::::

<!-- TODO: difference between "=" and "==" -->

## Vectors vs. Lists (1)

- A **vector** is a "list" of elements of the **same class**, indexed by their **position**
- In R, most operations are by default **vectorized** (i.e., applied to each element of the vector)
- Create and concatenate vectors with the combine function `c()`

::: {.fragment}

```{r}
#| echo: true
#| eval: false

# Vector
x <- c(0, 1, 2)
x + 3
```

:::

::: {.fragment}

```{r}
#| echo: false

# Vector
x <- c(0, 1, 2)
x + 3
```

:::

::: {.fragment}

```{r}
#| echo: true

c(x, 3)
```

:::

::: {.fragment}

:::: {.callout-warning}

R starts counting at 1, not 0.

```{r}
#| echo: true
x[2]
```

::::

:::


## Vectors vs. Lists (2)


- A **list** is a container of named elements of **any kind**, indexed by their **name**

```{r}
#| echo: true

mylist <- list(var1 = "some text", var2 = 30, var3 = x)
mylist$var3 # = mylist[["var3"]]
```

::: {.fragment}

:::: {.callout-warning}

`mylist[]` returns a list, while `mylist[[]]` returns the element itself

::::

:::

- You can also merge lists with `c()`

::: {.fragment}

```{r}
#| echo: true

mylist2 <- list(var4 = "some other text")
c(mylist, mylist2)
```

:::

## Pipes

- Pipe: `|>`, with `CTRL + SHIFT + M`
  - If old pipe `%>%`: Tools -> Global Options -> Code -> Native Pipe Operator
- Puts the previous "stuff" as the **first** argument of the next function

::: {.fragment}

```{r}
#| echo: true
4 |> sqrt()  # equivalent to
sqrt(4)
```

:::

- Pipes are useful to chain operations in a **Human-readable** way ("do this then this then this")

::: {.fragment}

```{r}
#| echo: true

result <- 4 |>
  sqrt() |>
  c(1, 0) |>
  as.character()
```

:::

::: {.fragment}

```{r}
#| echo: true
result
```

:::

## DataFrames

- A **data frame** is a collection of vectors of the **same length** (i.e. a table)
- Each vector is a **column** of the data frame
- Each column can have a **different class** (e.g., numeric, character, logical, etc.)

::: {.fragment}

```{r}
#| echo: true

# Create a data frame
df <- data.frame(
  var1 = c(1, 2, 3),
  var2 = c("a", "b", "c"),
  var3 = c(TRUE, FALSE, TRUE)
)
```

::: 

- A few "example" dataframes are directly available in base R, e.g., `mtcars`, `iris`

::: {.fragment}

:::: {.callout-tip}

You can view the first rows of a data frame with `head()`

```{r}
#| echo: true

head(iris)
```

::::

:::



## Packages

::: {.columns}

:::: {.column width="70%"}

- Install packages with `install.packages()`

::::: {.fragment}

```{r}
#| echo: true
#| eval: false

install.packages("tidyverse")
install.packages("easystats")
```

:::::

- `tidyverse`[^1] and `easystats`[^2] are actually *collections* of packages
- *Load* packages with `library()`
  - This simply makes the functions of the package available in the current session
  - You can still call functions from packages that are not loaded by explicitly mentioning the package name `pkg::fun()`

::::: {.fragment}

:::::: {.callout-tip}

It is good practice to explicitly mention a function's package when using it, e.g. `dplyr::select()`, especially when using less popular functions.

::::::

:::::


[^1]: tidyverse: `ggplot2`, `dplyr`, `tidyr`, `readr`, `purrr`, `tibble`, `stringr`, `forcats`
[^2]: easystats: `report`, `performance`, `parameters`, `insight`, `see`, `modelbased`, `correlation`, `effectsize`, `bayestestR`

::::

:::: {.column width="30%"}

![](https://diytranscriptomics.com/images/tidyverse.png)

![](https://easystats.github.io/easystats/reference/figures/logo_wall.png)

::::

:::

## ggplot basics (1)

::::: {.columns}
:::: {.column width="50%" style="font-size: 90%"}

- `ggplot2` is the main R package for data visualization
- It is based on the **Grammar of Graphics** <sub><sup>(Wilkinson, 2005)</sup></sup>
- The main function is `ggplot()`
  1. Takes a data frame as **first** argument
  2. Followed by a mapping of variables to **aesthetic** characteristics (x, y, color, shape, etc.)
  3. We can then add layers to the plot with `+`
- Note: In ggplot (and most tidyverse) packages, variables are **not** quoted (`x=Sepal.Length`, not `x="Sepal.Length"`)
  - This is **not typically the case** (in other packages and languages)

::::

:::: {.column }

::: {.fragment}

```{r}
#| echo: true
#| warning: false
#| message: false

library(tidyverse)

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point() +
  geom_density_2d() +
  theme_classic()
```

:::
::::
:::::

## ggplot basics (2)
::: {.nonincremental .stretch}

- The arguments passed to `ggplot()` are **inherited** by the layers
- One can specify different data \& aesthetics for each layer

```{r}
#| echo: true

ggplot() +
  geom_point(data=iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_density_2d(data=iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  theme_classic()
```

:::


## ggplot basics (3)
::: {.nonincremental .stretch}

- Aside from aesthetics and data, other arguments can be used to customize the plot

```{r}
#| echo: true

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point(color="yellow", size=4, shape="triangle") +
  geom_density_2d(color="red") +
  see::theme_abyss()  # Package in easystats
```

:::

## ggplot basics (4)

::: {.stretch}

:::: {.callout-warning}

Misnomer: do **NOT** confuse arguments that are **"aesthetics"** in `aes()` (i.e., map variable names to aesthetic features) with arguments that control the **appearance** of the plot (not in `aes()`)

::::

:::: {.columns}

::::: {.column width="50%"}

:::::: {.fragment}

```{r}
#| echo: true

ggplot(iris) +
  geom_point(aes(x = Sepal.Length,
                 y = Sepal.Width,
                 color="blue"))
```

::::::

:::::

::::: {.column}

:::::: {.fragment}

```{r}
#| echo: true
ggplot(iris) +
  geom_point(aes(x = Sepal.Length,
                 y = Sepal.Width),
             color="blue")
```

::::::

:::::

::::

:::

## ggplot basics (5)

::: {.stretch}

- The **appearance** of **aesthetic mappings** can be controlled with `scale_*()`

:::: {.fragment}

```{r}
#| echo: true
iris |>
  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color=Species)) +
  geom_point(size=3) +
  scale_color_manual(values=list(setosa="orange",
                                 versicolor="purple",
                                 virginica="green")) +
  see::theme_abyss()
```

::::

:::



## For loops

- For loops are used to **iterate** over a sequence of values

::: {.fragment}

```{r}
#| echo: true

myvec <- c("Tom", "Dom", "Harry")
for(x in myvec){
  print(x)
}
```

::: 

- It is convenient to iterate over sequences of numbers, e.g., `1:10` 

::: {.fragment}

```{r}
#| echo: true

for(i in 1:10){
  print(i)
}
```

:::

- It is useful to **initialize** an empty list to then store some result at each iteration

::: {.fragment}

```{r}
#| echo: true

myseq <- c()  # Initialize empty vector
for(i in 1:10){
  # Take 10 random elements from this list 
  newvector <- sample(c(1, 2, 3), 10, replace = TRUE) 
  # Compute mean
  mu <- mean(newvector)
  # Append to myseq
  myseq <- c(myseq, mu)
}
myseq
```

:::


## Functions

- Functions are self-contained factories
  - They take some variables in (through **arguments**)
  - They **return** some output

::: {.fragment}

```{r}
#| echo: true

# Define a new function
do_an_addition <- function(x, y) {
  result <- x + y
  return(result)  
}  
```

:::

::: {.fragment}

```{r}
#| echo: true

# Call the function
result <- do_an_addition(x=2, y=3)
result
```

:::

## Quizz Time {background-color="#FFAB91"}

- `1 + "1"` returns an error. Why?
- What's the difference between `c()` and `list()`?
- In ggplot, aesthetics refer to visual customization (e.g., change the color of all points)
- A pipe takes the output of the previous function as the first argument of the next
- What will `True * 3` return?
- What will `TRUE / 10` return?
- I do `ggplot(iris, aes(x="Sepal.Length", y="Petal.Length"))` but it throws an error. Why?
- I do `ggplot(iris, aes(x=Sepal.Length, y=Petal.length))` but it throws an error. Why?
- I am running `mutate(data, x = 3)` but it says `Error in mutate(x) : could not find function "mutate"`. Why?
- What is the problem with the following:


::: {.fragment}

```{r}
#| echo: true
#| eval: false

do_a_multiplication <- function(numbers) {
  result <- x * y
  return(result)  
}  
```

:::


## The End <sub><sup>(for now)</sup></sub> {.center background-color="#212121"}

*Thank you!*
